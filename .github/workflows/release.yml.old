name: Release Desktop Apps

on:
  # Manual trigger only - click "Run workflow" in GitHub Actions UI
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create GitHub release after build?'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

  # Optional: Uncomment to auto-trigger on version tags
  # push:
  #   tags:
  #     - 'v*'

jobs:
  build-desktop:
    strategy:
      fail-fast: true  # Cancel all jobs if one fails (saves time)
      matrix:
        include:
          # Windows build (portable executable only)
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            platform-flag: --windows
            package-types: nsis

          # Linux build (portable AppImage + deb package)
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform-flag: --linux
            package-types: appimage,deb

          # macOS build (portable app bundle only)
          - platform: macos-latest
            target: x86_64-apple-darwin
            platform-flag: --macos
            package-types: macos

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: '. -> target'

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install Dioxus CLI (Unix)
        if: runner.os != 'Windows'
        run: |
          chmod +x install-dx-rc.sh
          ./install-dx-rc.sh v0.7.0-rc.3

      - name: Add Dioxus to PATH (Unix)
        if: runner.os != 'Windows'
        run: echo "$HOME/.dx/bin" >> $GITHUB_PATH

      - name: Install Dioxus CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: .\install-dx-rc.ps1 v0.7.0-rc.3

      - name: Add Dioxus to PATH (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: echo "$env:USERPROFILE\.dx\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Resolve and build dependencies
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build desktop bundle
        run: dx bundle ${{ matrix.platform-flag }} --release --package-types="${{ matrix.package-types }}" --out-dir="dist"

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dxrc-windows
          path: dist/*.exe
          if-no-files-found: warn

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dxrc-linux
          path: |
            dist/*.AppImage
            dist/*.deb
          if-no-files-found: warn

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: dxrc-macos
          path: dist/*.app
          if-no-files-found: warn

  create-release:
    needs: build-desktop
    runs-on: ubuntu-latest
    # Only create release if manually requested OR triggered by tag push
    if: github.event.inputs.create_release == 'true' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
